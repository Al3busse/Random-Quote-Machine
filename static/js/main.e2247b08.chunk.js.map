{"version":3,"sources":["components/button/Button.js","components/shareSS/ShareSS.js","components/quotemachine/Quotemachine.js","App.js","serviceWorker.js","index.js","fonts/NovaCut-Regular.ttf","fonts/GreatVibes-Regular.ttf","fonts/PermanentMarker-Regular.ttf"],"names":["Button","clickHandler","buttonName","textColor","id","onClick","style","ShareSS","props","className","borderColor","href","textShare","authorShare","rel","target","icon","faTwitter","size","faWhatsapp","Quotemachine","Card","boxShadow","Row","sm","span","xs","margin","Col","color","pickedRandomQuote","undefined","offset","pickedAuthor","border","newQuote","FlashDiv","styled","div","keyframes","flash","App","state","quotes","selectedQuote","flashing","colorHexCode","selectRandomQuote","bind","setQuote","afterSetStateFinished","randomColor","fetch","then","data","json","setState","prevProps","prevState","bgColor","this","document","querySelector","backgroundColor","length","Math","floor","random","setTimeout","toString","Container","display","flexDirection","alignItems","quote","author","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uOAWeA,G,kBARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,UAA7B,OACb,yBAAKC,GAAG,oBACN,4BAAQA,GAAG,YAAYC,QAASJ,EAAcK,MAAOH,GAClDD,M,gBC0BQK,G,MA1BC,SAACC,GAAD,OACd,6BACE,4BAAQC,UAAU,cAAcH,MAAOE,EAAME,aAC3C,uBACEC,KAAI,gDAA2CH,EAAMI,UAAjD,YAA8DJ,EAAMK,YAApE,yBACJC,IAAI,sBACJC,OAAO,SACPX,GAAG,eAEH,kBAAC,IAAD,CAAiBY,KAAMC,IAAWC,KAAK,SAI3C,4BAAQT,UAAU,cAAcH,MAAOE,EAAME,aAC3C,uBACEC,KAAI,yCAAoCH,EAAMI,UAA1C,YAAuDJ,EAAMK,aACjEE,OAAO,SACPD,IAAI,sBACJV,GAAG,kBAEH,kBAAC,IAAD,CAAiBY,KAAMG,IAAYD,KAAK,Y,sBC6BjCE,G,MA9CM,SAACZ,GAAD,OACnB,kBAACa,EAAA,EAAD,CAAMjB,GAAG,OAAOE,MAAO,CAAEgB,UAAW,qBAClC,kBAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IACZnB,MAAO,CAAEqB,OAAQ,wBAEjB,kBAACC,EAAA,EAAD,KACE,uBAAGxB,GAAG,OAAOE,MAAO,CAAEuB,MAAOrB,EAAML,YAAnC,IACIK,EAAMsB,kBAAoBtB,EAAMsB,uBAAoBC,EADxD,OAKJ,kBAACR,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CAAKJ,GAAI,CAAEC,KAAM,EAAGO,OAAQ,GAAKN,GAAI,CAAED,KAAM,EAAGO,OAAQ,IACtD,uBAAG5B,GAAG,SAASE,MAAO,CAAEuB,MAAOrB,EAAML,YAClCK,EAAMyB,aAAezB,EAAMyB,kBAAeF,KAIjD,kBAACR,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CAAKJ,GAAI,CAAEC,KAAM,GAAKC,GAAI,CAAED,KAAM,GAAKrB,GAAG,sBACxC,kBAAC,EAAD,CACEQ,UAAWJ,EAAMsB,kBACjBjB,YAAaL,EAAMyB,aACnBvB,YAAa,CACXwB,OAAQ,YAAc1B,EAAML,UAC5BmB,UAAW,mBAAqBd,EAAML,cAI5C,kBAACyB,EAAA,EAAD,CAAKJ,GAAI,CAAEC,KAAM,GAAKC,GAAI,CAAED,KAAM,IAChC,kBAAC,EAAD,CACEvB,WAAYM,EAAMN,WAClBD,aAAcO,EAAM2B,SACpBhC,UAAW,CACT0B,MAAOrB,EAAML,UACb+B,OAAQ,YAAc1B,EAAML,UAC5BmB,UAAW,mBAAqBd,EAAML,kB,mNCnClD,IAAMiC,EAAWC,IAAOC,IAAV,IACMC,YADN,IACkBC,UA4HjBC,E,kDAxHb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAEDkC,MAAQ,CACXC,OAAQ,GACRC,cAAe,GACfC,SAAU,MACVC,aAAc,SAEhB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAC7B,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAZF,E,gEAeE,IAAD,OAClBI,MACE,8IAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACV,GAAD,OAAY,EAAKa,SAAS,CAAEb,cACjCU,MAAK,kBACJ,EAAKG,SAAS,CACZZ,cAAe,EAAKG,oBACpBD,aAAc,EAAKK,qB,yCAKRM,EAAWC,GAC5B,IAAMC,EAAUC,KAAKlB,MAAMI,aAEvBW,EAAUE,UAAYA,IACRE,SAASC,cAAc,QAC/BxD,MAAMyD,gBAAkBJ,K,0CAKlC,GAAKC,KAAKlB,MAAMC,OAAOqB,OAGvB,OAAOJ,KAAKlB,MAAMC,OAChBsB,KAAKC,MAAMD,KAAKE,SAAWP,KAAKlB,MAAMC,OAAOqB,W,8CAK/CI,WACE,WACER,KAAKJ,SAAS,CAAEX,SAAU,SAC1BG,KAAKY,MACP,Q,oCAKF,MAAO,MAAS,GAAK,IAAMK,KAAKE,SAAY,GAAGE,SAAS,M,iCAG9C,IAAD,OACTD,WACE,WACER,KAAKJ,SAAS,CACZZ,cAAegB,KAAKb,oBAEpBD,aAAcc,KAAKT,iBAErBH,KAAKY,MAEP,KAGFA,KAAKJ,SACH,CACEX,SAAUT,IAEZ,WACE,EAAKc,6B,+BAMT,OACE,uBAAMR,MAAMG,SAAZ,CACEyB,WAAS,EACThE,MAAO,CACLiE,QAAS,OACTC,cAAe,SACf7C,OAAQ,OACR8C,WAAY,WAGd,kBAAClD,EAAA,EAAD,KACE,wBAAInB,GAAG,SAAP,yBAEF,kBAACmB,EAAA,EAAD,KACE,kBAAC+C,EAAA,EAAD,CAAWlE,GAAG,aACZ,kBAAC,EAAD,CACED,UAAWyD,KAAKlB,MAAMI,aACtBhB,kBAAmB8B,KAAKlB,MAAME,cAAc8B,MAC5CzC,aAAc2B,KAAKlB,MAAME,cAAc+B,OACvCxC,SAAUyB,KAAKX,SACf/C,WAAY,gBAIlB,kBAACqB,EAAA,EAAD,KACE,4BAAQnB,GAAG,UAAX,UACU,IACR,uBAAGO,KAAK,8BAA8BP,GAAG,WAAzC,0B,GAhHMwE,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,iKEzI5BC,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,sD","file":"static/js/main.e2247b08.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = ({ clickHandler, buttonName, textColor }) => (\n  <div id='button-container'>\n    <button id='new-quote' onClick={clickHandler} style={textColor}>\n      {buttonName}\n    </button>\n  </div>\n);\n\nexport default Button;\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faWhatsapp } from \"@fortawesome/free-brands-svg-icons\";\r\nimport \"./ShareSS.css\";\r\n\r\nconst ShareSS = (props) => (\r\n  <div>\r\n    <button className='buttonClass' style={props.borderColor}>\r\n      <a\r\n        href={`https://twitter.com/intent/tweet?text=${props.textShare}-${props.authorShare}&hashtags=randomquote`}\r\n        rel='noopener noreferrer'\r\n        target='_blank'\r\n        id='tweet-quote'\r\n      >\r\n        <FontAwesomeIcon icon={faTwitter} size='2x'></FontAwesomeIcon>\r\n      </a>\r\n    </button>\r\n\r\n    <button className='buttonClass' style={props.borderColor}>\r\n      <a\r\n        href={`https://api.whatsapp.com/?text=${props.textShare}-${props.authorShare}`}\r\n        target='_blank'\r\n        rel='noopener noreferrer'\r\n        id='whatsapp-quote'\r\n      >\r\n        <FontAwesomeIcon icon={faWhatsapp} size='2x'></FontAwesomeIcon>\r\n      </a>\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default ShareSS;\r\n","import React from \"react\";\nimport Button from \"../button/Button.js\";\nimport ShareSS from \"../shareSS/ShareSS\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./Quotemachine.css\";\n\nconst Quotemachine = (props) => (\n  <Card id='card' style={{ boxShadow: \"3px 3px 20px 0px\" }}>\n    <Row\n      sm={{ span: 12 }}\n      xs={{ span: 12 }}\n      style={{ margin: \"1rem 1rem 1rem 1rem\" }}\n    >\n      <Col>\n        <p id='text' style={{ color: props.textColor }}>\n          \"{props.pickedRandomQuote ? props.pickedRandomQuote : undefined}\"\n        </p>\n      </Col>\n    </Row>\n    <Row>\n      <Col sm={{ span: 8, offset: 4 }} xs={{ span: 8, offset: 4 }}>\n        <p id='author' style={{ color: props.textColor }}>\n          {props.pickedAuthor ? props.pickedAuthor : undefined}\n        </p>\n      </Col>\n    </Row>\n    <Row>\n      <Col sm={{ span: 6 }} xs={{ span: 6 }} id='buttonSS-container'>\n        <ShareSS\n          textShare={props.pickedRandomQuote}\n          authorShare={props.pickedAuthor}\n          borderColor={{\n            border: \"1px solid\" + props.textColor,\n            boxShadow: \"1px 1px 10px 1px\" + props.textColor,\n          }}\n        />\n      </Col>\n      <Col sm={{ span: 6 }} xs={{ span: 6 }}>\n        <Button\n          buttonName={props.buttonName}\n          clickHandler={props.newQuote}\n          textColor={{\n            color: props.textColor,\n            border: \"1px solid\" + props.textColor,\n            boxShadow: \"1px 1px 10px 1px\" + props.textColor,\n          }}\n        />\n      </Col>\n    </Row>\n  </Card>\n);\n\nexport default Quotemachine;\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Quotemachine from \"./components/quotemachine/Quotemachine\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport \"./fonts/NovaCut-Regular.ttf\";\r\nimport \"./fonts/GreatVibes-Regular.ttf\";\r\nimport \"./fonts/PermanentMarker-Regular.ttf\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { flash } from \"react-animations\";\r\n\r\nconst FlashDiv = styled.div`\r\n  animation: 1.8s ${keyframes`${flash}`};\r\n`;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      quotes: [],\r\n      selectedQuote: [],\r\n      flashing: \"div\",\r\n      colorHexCode: \"white\",\r\n    };\r\n    this.selectRandomQuote = this.selectRandomQuote.bind(this);\r\n    this.setQuote = this.setQuote.bind(this);\r\n    this.afterSetStateFinished = this.afterSetStateFinished.bind(this);\r\n    this.randomColor = this.randomColor.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://gist.githubusercontent.com/Al3busse/7891ad8844a728eae79cb0d5be696765/raw/303d0453f3bfb205a218f8cd510962c7a950788c/funnyQuotes.json\"\r\n    )\r\n      .then((data) => data.json())\r\n      .then((quotes) => this.setState({ quotes }))\r\n      .then(() =>\r\n        this.setState({\r\n          selectedQuote: this.selectRandomQuote(),\r\n          colorHexCode: this.randomColor(),\r\n        })\r\n      );\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const bgColor = this.state.colorHexCode;\r\n\r\n    if (prevProps.bgColor !== bgColor) {\r\n      const bodyElt = document.querySelector(\"body\");\r\n      bodyElt.style.backgroundColor = bgColor;\r\n    }\r\n  }\r\n\r\n  selectRandomQuote() {\r\n    if (!this.state.quotes.length) {\r\n      return;\r\n    }\r\n    return this.state.quotes[\r\n      Math.floor(Math.random() * this.state.quotes.length)\r\n    ];\r\n  }\r\n\r\n  afterSetStateFinished() {\r\n    setTimeout(\r\n      function () {\r\n        this.setState({ flashing: \"div\" });\r\n      }.bind(this),\r\n      1900\r\n    );\r\n  }\r\n\r\n  randomColor() {\r\n    return \"#\" + (((1 << 24) * Math.random()) | 0).toString(16);\r\n  }\r\n\r\n  setQuote() {\r\n    setTimeout(\r\n      function () {\r\n        this.setState({\r\n          selectedQuote: this.selectRandomQuote(),\r\n\r\n          colorHexCode: this.randomColor(),\r\n        });\r\n      }.bind(this),\r\n\r\n      900\r\n    );\r\n\r\n    this.setState(\r\n      {\r\n        flashing: FlashDiv,\r\n      },\r\n      () => {\r\n        this.afterSetStateFinished();\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <this.state.flashing\r\n        Container\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          margin: \"auto\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Row>\r\n          <h1 id='title'>Random Quote Machine</h1>\r\n        </Row>\r\n        <Row>\r\n          <Container id='quote-box'>\r\n            <Quotemachine\r\n              textColor={this.state.colorHexCode}\r\n              pickedRandomQuote={this.state.selectedQuote.quote}\r\n              pickedAuthor={this.state.selectedQuote.author}\r\n              newQuote={this.setQuote}\r\n              buttonName={\"New Quote\"}\r\n            />\r\n          </Container>\r\n        </Row>\r\n        <Row>\r\n          <footer id='footer'>\r\n            Made by{\" \"}\r\n            <a href='https://github.com/Al3busse' id='footerA'>\r\n              Alejandro Busse\r\n            </a>\r\n          </footer>\r\n        </Row>\r\n      </this.state.flashing>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/NovaCut-Regular.f242da80.ttf\";","module.exports = __webpack_public_path__ + \"static/media/GreatVibes-Regular.c1c92d0c.ttf\";","module.exports = __webpack_public_path__ + \"static/media/PermanentMarker-Regular.c863f802.ttf\";"],"sourceRoot":""}
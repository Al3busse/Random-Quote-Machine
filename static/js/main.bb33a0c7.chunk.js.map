{"version":3,"sources":["components/button/Button.js","components/shareSS/ShareSS.js","components/quotemachine/Quotemachine.js","App.js","serviceWorker.js","index.js"],"names":["Button","clickHandler","buttonName","id","onClick","ShareSS","props","href","textShare","authorShare","rel","target","icon","faTwitter","faWhatsapp","Quotemachine","Card","Title","style","textAlign","Row","Col","sm","span","offset","xs","pickedRandomQuote","pickedAuthor","newQuote","App","state","quotes","selectedQuote","selectRandomQuote","bind","setQuote","fetch","then","data","json","setState","this","length","Math","floor","random","console","log","Container","quote","author","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb33a0c7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = ({ clickHandler, buttonName }) => (\n  <button id='new-quote' onClick={clickHandler}>\n    {buttonName}\n  </button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faWhatsapp } from \"@fortawesome/free-brands-svg-icons\";\n\nconst ShareSS = (props) => (\n  <div>\n    <button>\n      <a\n        href={`https://twitter.com/intent/tweet?text=${props.textShare}-${props.authorShare}&hashtags=randomquote`}\n        rel='noopener noreferrer'\n        target='_blank'\n        id='tweet-quote'\n      >\n        <FontAwesomeIcon icon={faTwitter}> </FontAwesomeIcon>\n      </a>\n    </button>\n\n    <button>\n      <a\n        href={`https://wa.me/?text=${props.textShare}-${props.authorShare}`}\n        target='_blank'\n        rel='noopener noreferrer'\n        id='whatsapp-quote'\n      >\n        <FontAwesomeIcon icon={faWhatsapp}> </FontAwesomeIcon>\n      </a>\n    </button>\n  </div>\n);\n\nexport default ShareSS;\n","import React from \"react\";\nimport Button from \"../button/Button.js\";\nimport ShareSS from \"../shareSS/ShareSS\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\n\nconst Quotemachine = (props) => (\n  <Card>\n    <Card.Title style={{ textAlign: \"center\" }}>\n      Random Quote Machine\n    </Card.Title>\n    <Row>\n      <Col sm={{ span: 10, offset: 1 }} xs={{ span: 10, offset: 1 }}>\n        <p id='text'>\n          \"{props.pickedRandomQuote ? props.pickedRandomQuote : \"\"}\"\n        </p>\n      </Col>\n    </Row>\n    <Row>\n      <Col sm={{ span: 3, offset: 6 }} xs={{ span: 6, offset: 6 }}>\n        <p id='author'>{props.pickedAuthor ? props.pickedAuthor : \"\"}</p>\n      </Col>\n    </Row>\n    <Row>\n      <Col sm={{ span: 3, offset: 1 }} xs={{ span: 4, offset: 1 }}>\n        <ShareSS\n          textShare={props.pickedRandomQuote}\n          authorShare={props.pickedAuthor}\n        />\n      </Col>\n      <Col sm={{ span: 3, offset: 4 }} xs={{ span: 5, offset: 1 }}>\n        <Button buttonName={props.buttonName} clickHandler={props.newQuote} />\n      </Col>\n    </Row>\n  </Card>\n);\n\nexport default Quotemachine;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Quotemachine from \"./components/quotemachine/Quotemachine\";\nimport Container from \"react-bootstrap/Container\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quotes: [],\n      selectedQuote: [],\n    };\n    this.selectRandomQuote = this.selectRandomQuote.bind(this);\n    this.setQuote = this.setQuote.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/Al3busse/7891ad8844a728eae79cb0d5be696765/raw/303d0453f3bfb205a218f8cd510962c7a950788c/funnyQuotes.json\"\n    )\n      .then((data) => data.json())\n      .then((quotes) => this.setState({ quotes }))\n      .then(() =>\n        this.setState({\n          selectedQuote: this.selectRandomQuote(),\n        })\n      );\n  }\n\n  selectRandomQuote() {\n    if (!this.state.quotes.length) {\n      return;\n    }\n    return this.state.quotes[\n      Math.floor(Math.random() * this.state.quotes.length)\n    ];\n  }\n\n  setQuote() {\n    this.setState({\n      selectedQuote: this.selectRandomQuote(),\n    });\n  }\n\n  render() {\n    console.log(this.state.selectedQuote);\n    return (\n      <Container id='quote-box'>\n        <Quotemachine\n          pickedRandomQuote={this.state.selectedQuote.quote}\n          pickedAuthor={this.state.selectedQuote.author}\n          newQuote={this.setQuote}\n          buttonName={\"New Quote\"}\n        />\n      </Container>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}